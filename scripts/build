#!/usr/bin/env node
const debug = require('debug');
const log = debug('@pie-element:scripts:build');
const { processFix } = require('@pie-framework/build-helper');
const argv = require('minimist')(process.argv.slice(2));
const fs = require('fs-extra');
const spawn = require('child-process-promise').spawn;
const rimraf = require('rimraf');
const _ = require('lodash');

log('scope: ', argv.scope);

const listPackages = () => ['calculator', 'categorize', 'extended-text-entry'];

const getPackages = () => {
  if (argv.scope) {
    return Array.isArray(argv.scope) ? argv.scope : [argv.scope];
  } else {
    return listPackages();
  }
};

argv.clean = argv.clean !== false;

processFix(log, () => {
  process.exit();
});

const cleanLib = p =>
  new Promise((resolve, reject) => {
    if (argv.clean) {
      const lib = `${p}/lib`;
      log('clean: ', lib);
      rimraf(lib, e => {
        if (e) {
          reject(e);
        } else {
          resolve();
        }
      });
    } else {
      resolve();
    }
  });

const buildDir = p => {
  log(`build: ${p}`);

  return cleanLib(p).then(() => {
    const args = [
      `${p}/src`,
      '--out-dir',
      `${p}/lib`,
      '--ignore',
      '/__test__/',
      '--ignore',
      '/__tests__/'
    ];
    return spawn('./node_modules/.bin/babel', args, {
      stdio: 'inherit'
    });
  });
};

const buildPackage = async name => {
  log('buildPackage: ', name);
  const n = `packages/${name}`;
  const stat = await fs.stat(n);
  const builds = [];

  if (stat.isDirectory()) {
    const files = await fs.readdir(n);
    if (files.indexOf('src') !== -1) {
      builds.push(buildDir(n));
    }

    if (files.indexOf('controller') !== -1) {
      builds.push(buildDir(`${n}/controller`));
    }

    if (files.indexOf('configure') !== -1) {
      builds.push(buildDir(`${n}/configure`));
    }

    return Promise.all(builds);
  } else {
    return Promise.resolve([]);
  }
};

const packages = getPackages();

log('packages: ', packages);
const buildPromises = packages.map(p => buildPackage(p));

Promise.all(buildPromises)
  .then(() => {
    log('---------> done');
  })
  .catch(e => {
    log('error', e);
  });
